Homework 4
VolcanoCoin contract

At each point where you change your contract you should re-deploy to the JavascriptVM
and test your changes.

1. In Remix, create a new file called VolcanoCoin.sol .
	Done

2. Define the pragma compiler version to ^0.8.0 .
	Done

3. Before the pragma version, add a license identifer
// SPDX-License-Identifier: UNLICENSED .
	Done

4. Create a contract called VolcanoCoin.
	Done

5. Create a variable to hold the total supply of 10000.
	Done

6. Make a public function that returns the total supply.
	Done

7. Make a public function that can increase the total supply. Inside the function, add 1000
to the current total supply.
	Done

8. We probably want users to be aware of functions in the contract for greater
transparency, but to make them all public will create some security risks (e.g. we don't
want users to be able to change the total supply).
Declare an address variable called owner.
	Done

9. Next, create a modifier which only allows an owner to execute certain functions.
	Done

10. Make your change total supply function public , but add your modifier so that only
the owner can execute it.
	Done

11. The contract owner's address should only be updateable in one place. Create a
constructor and within the constructor, store the owner's address.
	Done

12. It would be useful to broadcast a change in the total supply. Create an event that emits
the new value whenever the total supply changes. When the supply changes, emit this
event.
	Done

13. In order to keep track of user balances, we need to associate a user's address with the
balance that they have.
	a) What is the best data structure to hold this association ?
		Mapping
			
	b) Using your choice of data structure, set up a variable called balances to keep
	track of the number of volcano coins that a user has.
		Done	
	
14. We want to allow the balances variable to be read from the contract, there are 2 ways
to do this.
	What are those ways ?
		Declare the variable public, or create a function that reads the state for the variable.

	Use one of the ways to make your balances variable visible to users of the contract.
		Done
		
15. Now change the constructor, to give all of the total supply to the owner of the
contract.
	Done

16. Now add a public function called transfer to allow a user to transfer their tokens to
another address. This function should have 2 parameters :
	the amount to transfer and
	the recipient address.

	Why do we not need the sender's address here ?
		The msg.sender covers this.
	What would be the implication of having the sender's address as a parameter ?
		Depending on permissions, anyone could change anyone else's balance.

17. Add an event to the transfer function to indicate that a transfer has taken place, it
should log the amount and the recipient address.
	Done

18. We want to keep a record for each user's transfers. Create a struct called Payment
that stores the transfer amount and the recipient's address.
	Done

19. We want to have a payments array for each user sending the payment. Create a
mapping which returns an array of Payment structs when given this user's address.
	Done
	

// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract VolcanoCoin {
    
    
    address owner;
    uint256 totalSupply = 10000;
    mapping(address => uint256) public balances;
    mapping(address => Payment[]) public payments;

    struct Payment {
        address userAddress;
        uint256 userAmount;
    }
    
    Payment[] public transfers;
    

    constructor() {
        owner = msg.sender;
        balances[msg.sender]=totalSupply;
    }

    modifier onlyOwner {
        if (msg.sender == owner) {
            _;
        }
    }

    event totalSupplyChange(uint256);
    event transferDone(uint256, address);

    function getTotalSupply() public view returns (uint256){
        return totalSupply;
    }

    function addSupply() public onlyOwner {
        totalSupply = totalSupply + 1000;
        emit totalSupplyChange(totalSupply);
    }

    function transfer(address recipient, uint256 amount) public {
        balances[msg.sender] = balances[msg.sender] - amount;
        
        balances[recipient] = balances[recipient] + amount;
        emit transferDone(amount, recipient);
        transfers.push(Payment({userAddress:recipient,userAmount:amount}));
        payments[msg.sender].push(Payment({userAddress:recipient,userAmount:amount}));
    }


    }

